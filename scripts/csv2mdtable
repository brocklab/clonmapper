#!/usr/bin/env python3
import argparse
import csv
import sys
from pathlib import Path

ALIGNMENTS = {"c": ":---:", "r": "---:", "l": ":---"}


def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("input", help="input csv file")
    parser.add_argument("-t", "--title", help="title", default="")
    parser.add_argument(
        "--fmt", help="column alignments i.e. (l,c,r) by default all centered"
    )
    return parser.parse_args()


def enclose(row):
    return "| " + row + " |"

def parse_csv(path_to_csv):
    with path_to_csv.open(mode="r") as f:
        reader = csv.DictReader(f)
        headers = list(reader.fieldnames)
        rows = [row.values() for row in reader]
    return headers, rows



def main():
    args = get_args()
    path_to_csv = Path.cwd() / args.input

    headers, csv_rows = parse_csv(path_to_csv)
    if args.fmt and (len(args.fmt.split(",")) != len(headers)):
                print("--fmt argument and # of columns don't match")
                sys.exit(1)

    column_fmt = (
                "|" + "|".join([ALIGNMENTS[i] for i in args.fmt.split(",")]) + "|"
            ) if args.fmt else  (
                "|" + "|".join([ALIGNMENTS["c"]] * len(headers)) + "|"
            )
    rows = []
    rows.append(enclose(" | ".join(headers)))
    rows.append(column_fmt)

    for row in csv_rows:
        try:
            row_out = enclose(" | ".join(row))
        except TypeError:
            print(f"Error: {row}")
            print(
                "there was an issue with this row does it have a value for each column?"
            )
            sys.exit(1)

        rows.append(row_out)
    print("\n")
    print(f"### {args.title}")
    print("\n".join(rows))
    print("\n")


if __name__ == "__main__":
    main()
